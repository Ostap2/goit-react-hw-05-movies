{"version":3,"file":"static/js/947.d7ab0296.chunk.js","mappings":"8LAkIA,UA9HA,WACE,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,CAAC,GAAlD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOO,EAAP,KAAgBC,EAAhB,KAsEA,OApEAC,EAAAA,EAAAA,YAAU,WACRC,EAAAA,EAAAA,IAAA,6CAC6CZ,GAAW,CACpDa,OAAQ,CACNC,QAAS,sCAGZC,MAAK,SAACC,GACLZ,EAAgBY,EAASC,KAC1B,IACAC,OAAM,SAACC,GACNC,QAAQD,MAAM,+BAAgCA,EAC/C,IAEHP,EAAAA,EAAAA,IAAA,6CAC6CZ,EAD7C,WAC+D,CAC3Da,OAAQ,CACNC,QAAS,sCAGZC,MAAK,SAACC,GACDA,EAASC,KAAKI,SAAWL,EAASC,KAAKI,QAAQC,OAAS,GAC1DhB,EAAc,kCAAD,OAAmCU,EAASC,KAAKI,QAAQ,GAAGE,WAE5E,IACAL,OAAM,SAACC,GACNC,QAAQD,MAAM,6BAA8BA,EAC7C,GACJ,GAAE,CAACnB,KAyCF,4BACE,wBAAKG,EAAaqB,SAClB,gBAAKC,IAAKpB,EAAYqB,IAAKvB,EAAaqB,MAAOG,UAAU,aACzD,eAAGA,UAAU,WAAb,qBAAiCxB,EAAayB,iBAC9C,eAAGD,UAAU,SAAb,0BAAoCxB,EAAa0B,aACjD,gBAAIF,UAAU,YAAd,WACE,gBAAIA,UAAU,YAAd,WACE,mBAAQG,QA9CC,WACflB,EAAAA,EAAAA,IAAA,6CAC6CZ,EAD7C,YACgE,CAC5Da,OAAQ,CACNC,QAAS,sCAGZC,MAAK,SAACC,GACLR,EAAQQ,EAASC,KAAKV,KACvB,IACAW,OAAM,SAACC,GACNC,QAAQD,MAAM,kCAAmCA,EAClD,GACJ,EAiCkCQ,UAAU,mBAArC,uBACCpB,EAAKe,OAAS,IACb,mBAAQQ,QAlBA,WAChBtB,EAAQ,GACT,EAgBqCmB,UAAU,oBAAtC,4BAGJ,gBAAIA,UAAU,YAAd,WACE,mBAAQG,QArCI,WAClBlB,EAAAA,EAAAA,IAAA,6CAC6CZ,EAD7C,YACgE,CAC5Da,OAAQ,CACNC,QAAS,sCAGZC,MAAK,SAACC,GACLN,EAAWM,EAASC,KAAKc,QAC1B,IACAb,OAAM,SAACC,GACNC,QAAQD,MAAM,+BAAgCA,EAC/C,GACJ,EAwBqCQ,UAAU,sBAAxC,0BACClB,EAAQa,OAAS,IAChB,mBAAQQ,QApBG,WACnBpB,EAAW,GACZ,EAkBwCiB,UAAU,uBAAzC,kCAIN,iBAAKA,UAAU,oBAAf,WACJ,kCACA,eAAIA,UAAU,WAAd,SACGpB,EAAKyB,KAAI,SAACC,GAAD,OACR,gBAAmBN,UAAU,WAA7B,WACG,gBAAKF,IAAG,0CAAqCQ,EAAMC,cAAgBR,IAAKO,EAAME,KAAMR,UAAU,iBAC/F,cAAGA,UAAU,UAAb,SACGM,EAAME,QAET,uBAAIF,EAAMG,cALHH,EAAMI,GADP,UAaR,iBAAKV,UAAU,oBAAf,WACE,qCACA,eAAIA,UAAU,aAAd,SACGlB,EAAQuB,KAAI,SAACM,GAAD,OACX,gBAAoBX,UAAU,aAA9B,WACE,uBAAIW,EAAOC,UACX,uBAAID,EAAOE,YAFJF,EAAOD,GADL,WAUtB,C","sources":["components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movieDetails, setMovieDetails] = useState({});\n  const [movieImage, setMovieImage] = useState('');\n  const [cast, setCast] = useState([]);\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}`, {\n        params: {\n          api_key: '0faef55576804b8824855a6bbe4c2da0',\n        },\n      })\n      .then((response) => {\n        setMovieDetails(response.data);\n      })\n      .catch((error) => {\n        console.error('Error getting movie details:', error);\n      });\n\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}/images`, {\n        params: {\n          api_key: '0faef55576804b8824855a6bbe4c2da0',\n        },\n      })\n      .then((response) => {\n        if (response.data.posters && response.data.posters.length > 0) {\n          setMovieImage(`https://image.tmdb.org/t/p/w500${response.data.posters[0].file_path}`);\n        }\n      })\n      .catch((error) => {\n        console.error('Error getting movie photo:', error);\n      });\n  }, [movieId]);\n\n  const loadCast = () => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}/credits`, {\n        params: {\n          api_key: '0faef55576804b8824855a6bbe4c2da0',\n        },\n      })\n      .then((response) => {\n        setCast(response.data.cast);\n      })\n      .catch((error) => {\n        console.error('Error getting cast information:', error);\n      });\n  };\n\n  const loadReviews = () => {\n    axios\n      .get(`https://api.themoviedb.org/3/movie/${movieId}/reviews`, {\n        params: {\n          api_key: '0faef55576804b8824855a6bbe4c2da0',\n        },\n      })\n      .then((response) => {\n        setReviews(response.data.results);\n      })\n      .catch((error) => {\n        console.error('Error getting movie reviews:', error);\n      });\n  };\n\n  const clearCast = () => {\n    setCast([]);\n  };\n\n  const clearReviews = () => {\n    setReviews([]);\n  };\n\n  return (\n    <div>\n      <h1>{movieDetails.title}</h1>\n      <img src={movieImage} alt={movieDetails.title} className=\"img-det\" />\n      <p className='p-rating'>Rating: {movieDetails.vote_average}</p>\n      <p className=\"descri\">Description: {movieDetails.overview}</p>\n      <ul className='ul-button'>\n        <li className='li-button'>\n          <button onClick={loadCast} className='button-load-cast'>Load Cast</button>\n          {cast.length > 0 && (\n            <button onClick={clearCast} className='button-clear-cast'>Clear Cast</button>\n          )}\n        </li>\n        <li className='li-button'>\n          <button onClick={loadReviews} className='button-load-Reviews'>Load Reviews</button>\n          {reviews.length > 0 && (\n            <button onClick={clearReviews} className='button-clear-Reviews'>Clear Reviews</button>\n          )}\n        </li>\n      </ul>\n      <div className=' container-center'>\n  <h2>Cast</h2>\n  <ul className='ul-actor'>\n    {cast.map((actor) => (\n      <li key={actor.id} className='li-actor'>\n         <img src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`} alt={actor.name} className=\"actor-photo\" />\n        <p className='p-actor'>\n          {actor.name}\n        </p>\n        <p>{actor.character}</p>\n      </li>\n    ))}\n  </ul>\n</div>\n\n\n      <div className=' container-center'>\n        <h2>Reviews</h2>\n        <ul className='ul-reviews'>\n          {reviews.map((review) => (\n            <li key={review.id} className='li-reviews'>\n              <p>{review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetails;\n"],"names":["movieId","useParams","useState","movieDetails","setMovieDetails","movieImage","setMovieImage","cast","setCast","reviews","setReviews","useEffect","axios","params","api_key","then","response","data","catch","error","console","posters","length","file_path","title","src","alt","className","vote_average","overview","onClick","results","map","actor","profile_path","name","character","id","review","author","content"],"sourceRoot":""}